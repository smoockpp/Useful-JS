/**
 * Form search class
 */

class FormSearch {
    constructor(searchField, table) {
        this.searchField = searchField;
        this.table = table;
        this.rows = table.querySelectorAll('.data-rows');
        this.sortable = table.querySelectorAll('.data-sort');
    }

    clear(str) {
        if (typeof str !== 'string') return console.error(str + ' is not a string');
        str = str.replace(/<(?:.|\n)*?>/gm, '');
        return str;
    }


    addIcons() {
        let clickCounter = 0;
        let evtTarget;
        if (this.sortable) {
            for (var i = 0; i < this.sortable.length; i++) {
                const ascSpan = document.createElement('span');
                ascSpan.classList.add('asc-span-order');
                ascSpan.innerHTML = ' &#8595;';
                this.sortable[i].appendChild(ascSpan);
                const descSpan = document.createElement('span');
                descSpan.classList.add('desc-span-order');
                descSpan.innerHTML = ' &#8593;';
                this.sortable[i].appendChild(descSpan);
                this.sortable[i].style.cursor = 'pointer';
                this.sortable[i].setAttribute('onclick', 'sortTable("'+this.table.id+'",'+i+')');
                // this.sortable[i].innerHTML += '  ';
                this.sortable[i].addEventListener('click', function(evt) {
                    if (evtTarget != evt.target) {
                        clickCounter = 0;
                        let children = Array.from(this.parentElement.children);
                        for (var j = 0; j < children.length; j++) {
                            if (j != i) {
                                const resetSpans = children[j].querySelectorAll('span[class$="span-order"]');
                                resetSpans.forEach(function(span) {
                                    span.style.display = 'inline-block';
                                })
                            }
                        }
                    }
                    if (clickCounter === 0) {
                        descSpan.style.display = 'none';
                        ascSpan.style.display = 'inline-block';
                        clickCounter++;
                        evtTarget = evt.target;
                    } else {
                        descSpan.style.display = 'inline-block';
                        ascSpan.style.display = 'none';
                        clickCounter = 0;
                    }

                    evt.stopPropagation();
                }, false);
            }
        }
    }

    init() {
        this.addIcons();
        const _thisRows = this.rows;
        const _this = this;
        this.searchField.addEventListener('keyup', function(evt) {
            const _thisValue = this.value;
            for (let i = 0; i < _thisRows.length; i++) {
                _thisRows[i].style.display = 'none';
                const childrens = Array.from(_thisRows[i].children)
                for (let j = 0; j < childrens.length; j++) {
                    if (_this.clear(childrens[j].innerHTML).toUpperCase().indexOf(_thisValue.toUpperCase()) > -1) {
                        _thisRows[i].style.display = 'table-row';
                    }
                }
            }
            evt.stopPropagation();
        }, false);
    }
}

function sortTable(el, n) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById(el);
    switching = true;
    //Set the sorting direction to ascending:
    dir = "asc";
    /*Make a loop that will continue until
    no switching has been done:*/
    while (switching) {
        //start by saying: no switching is done:
        switching = false;
        rows = table.getElementsByTagName("TR");
        /*Loop through all table rows (except the
        first, which contains table headers):*/
        for (i = 1; i < (rows.length - 1); i++) {
            //start by saying there should be no switching:
            shouldSwitch = false;
            /*Get the two elements you want to compare,
            one from current row and one from the next:*/
            x = rows[i].getElementsByTagName("TD")[n];
            y = rows[i + 1].getElementsByTagName("TD")[n];
            /*check if the two rows should switch place,
            based on the direction, asc or desc:*/
            if (dir == "asc") {
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch= true;
                    break;
                }
            } else if (dir == "desc") {
                if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch= true;
                    break;
                }
            }
        }
        if (shouldSwitch) {
            /*If a switch has been marked, make the switch
            and mark that a switch has been done:*/
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
            //Each time a switch is done, increase this count by 1:
            switchcount ++;
        } else {
            /*If no switching has been done AND the direction is "asc",
            set the direction to "desc" and run the while loop again.*/
            if (switchcount == 0 && dir == "asc") {
                dir = "desc";
                switching = true;
            }
        }
    }
}
